#!/usr/bin/env bash

# cmd [dest] [include dirs] [proto files (glob ok)]
# ${0} . -I../../../includes/dir ../../msgs/proto/*.proto

# * this script assumes that protoc, elm-protobuf, and elm-format are installed properly

function filterProto {
    local in="${1}"
    local out="${2}"

    local sedCmd=sed
    hash gsed 2>/dev/null && sedCmd=gsed

    cat ${in} | \
        # delete consecutive empty lines (simplifies multi-line empty message deletion)
        ${sedCmd} '/^$/N;/^\n$/D' | \
        # delete service definitions 
        ${sedCmd} '/^service/,/^}$/d' | \
        # delete annotations.proto (contains proto2 dependency)
        ${sedCmd} '/annotations.proto/d' | \
        # delete empty messages (single line)
        ${sedCmd} '/^message.*{\s*}/d' | \
        # delete empty messages (multiple lines)
        ${sedCmd} '/^message.*/ {N;N; /^message.*{[\s|\n]*\}/d}' | \
        # delete consecutive empty lines (again, some have likely been created)
        ${sedCmd} '/^$/N;/^\n$/D' | \
        # delete last line if empty
        ${sedCmd} '${/^$/d}' \
        >> ${out}
}

### main
function main {
    local dstDir="${1}"
    local incs=($(echo ${2}))
    local files=($(echo ${3}))
    local tmpDir="$(mktemp -t -d $(basename ${0}).XXXXXX)"

    function cleanup {
        [[ ! -d "${1}" || "${1}" == "/" ]] && echo "will not remove '${1}'" >&2 && return
        rm -rf "${1}"
    }
    trap "cleanup ${tmpDir}" EXIT

    for file in ${files[@]}; do
        filterProto "${file}" "${tmpDir}/$(basename ${file})"
    done

    protoc ${incs[@]} -I"${tmpDir}" --elm_out="${tmpDir}" "${tmpDir}"/*.proto > /dev/null 2>&1

    find "${tmpDir}" -name "*.elm" -exec elm-format --yes {} \;
    
    local foundDir
    find "${tmpDir}" -name "*.elm" -printf '%P\n' | while read file; do
        foundDir="$(dirname ${file})"
        if [[ "${foundDir}" != "." ]]; then
            mkdir -p "${dstDir}/${foundDir}"
        fi

        cp "${tmpDir}/${file}" "${dstDir}/${file}"
    done
}
### /main

### args
elmDestDir="${1}"
shift
[[ ! -d "${elmDestDir}" ]] && echo "first arg must be a directory" >&2 && exit 1

pbIncludeArgs=()
pbFileArgs=()

while test $# -gt 0; do
    case "${1}" in
        -I)
            shift
            pbIncludeArgs+=("-I${1}")
            shift
            ;;
        *)
            if [[ "${1}" == "-I"* ]]; then
                pbIncludeArgs+=("${1}")
            else
                pbFileArgs+=("${1}")
            fi
            shift
            ;;
    esac
done

for arg in ${pbIncludeArgs[@]}; do
    a="${arg#"-I"}"
    [[ ! -d "${a}" ]] && echo "include args must be dirs: non-dir '${a}'" >&2 && exit 1
done

[[ ${#pbFileArgs[@]} == 0 ]] && echo "additional args must be provided" >&2 && exit 1

for f in ${pbFileArgs}; do
    [[ ! -f "${f}" ]] && echo "additional args must be files: non-file '${f}'" >&2 && exit 1
done
### /args

main "${elmDestDir}" "$(echo ${pbIncludeArgs[@]})" "$(echo ${pbFileArgs[@]})"
