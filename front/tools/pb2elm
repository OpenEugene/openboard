#!/usr/bin/env bash

# cmd [destination dir] [include dirs] [source files (glob ok)]
# ${0} . -I../../../includes/dir ../../msgs/*

# * this script assumes that protoc, elm-protobuf, and elm-format are installed properly

function destinationDir() {
    [[ ! -d "${1}" ]] && echo "arg must be directory '${1}'" >&2 && exit 1

    echo "${1}"
}

function includeDirs() {
    local ins=("${@}")
    local rts=()

    local i in0 in1
    for (( i=0; i<${#ins}; i++ )); do
        in0=${ins[i]}
        in1=${ins[i+1]}

        [[ "${in0}" == "-I" ]] && rts+=("${in0}" "${in1}") && ((i++)) && continue
        [[ "${in0}" == "-I"* ]] && rts+=("${in0}") && continue
    done

    local rt0
    for rt0 in ${rts[@]}; do
        rt0="${rt0#"-I"}"

        [[ "${rt0}" == "" ]] && continue
        [[ ! -d "${rt0}" ]] && echo "non-dir '${rt0}'" >&2 && exit 1
    done

    echo "${rts[@]}"
}

function sourceFiles() {
    local ins=("${@}")
    local rts=()

    for in0 in ${ins[@]}; do
        [[ "${in0}" == "-"* ]] && continue

        [[ ! -f "${in0}" ]] && echo "non-file '${in0}'" >&2 && exit 1

        rts+=("${in0}")
    done

    [[ ${#rts[@]} == 0 ]] && echo "must provide one or more files" >&2 && exit 1

    echo "${rts[@]}"
}

function filterProto {
    local in="${1}"
    local out="${2}"

    local sedCmd=sed
    hash gsed 2>/dev/null && sedCmd=gsed

    cat ${in} | \
        # delete consecutive empty lines (simplifies multi-line empty message deletion)
        ${sedCmd} '/^$/N;/^\n$/D' | \
        # delete service definitions 
        ${sedCmd} '/^service/,/^}$/d' | \
        # delete annotations.proto (contains proto2 dependency)
        ${sedCmd} '/annotations.proto/d' | \
        # delete empty messages (single line)
        ${sedCmd} '/^message.*{\s*}/d' | \
        # delete empty messages (multiple lines)
        ${sedCmd} '/^message.*/ {N;N; /^message.*{[\s|\n]*\}/d}' | \
        # delete consecutive empty lines (again, some have likely been created)
        ${sedCmd} '/^$/N;/^\n$/D' | \
        # delete last line if empty
        ${sedCmd} '${/^$/d}' \
        >> ${out}
}

function trip {
    [[ ${1} > 0 ]] && exit ${1}
}

function main {
    local offset=1
    local dstDir incs files

    dstDir="$(destinationDir "${1}")"; trip $? 
    ((offset+=1))

    incs=($(includeDirs ${@:${offset}})); trip $?
    ((offset+=${#incs[@]}))

    files=($(sourceFiles ${@:$offset})); trip $?

    local tmpDir="$(mktemp -t -d $(basename ${0}).XXXXXX)"

    function cleanup {
        [[ ! -d "${1}" || "${1}" == "/" ]] && echo "will not remove '${1}'" >&2 && return
        rm -rf "${1}"
    }
    trap "cleanup ${tmpDir}" EXIT

    for file in ${files[@]}; do
        filterProto "${file}" "${tmpDir}/$(basename ${file})"
    done

    protoc ${incs[@]} -I"${tmpDir}" --elm_out="${tmpDir}" "${tmpDir}"/*.proto > /dev/null 2>&1

    find "${tmpDir}" -name "*.elm" -exec elm-format --yes {} \; > /dev/null
    
    local foundDir
    find "${tmpDir}" -name "*.elm" -printf '%P\n' | while read file; do
        foundDir="$(dirname ${file})"
        if [[ "${foundDir}" != "." ]]; then
            mkdir -p "${dstDir}/${foundDir}"
        fi

        cp "${tmpDir}/${file}" "${dstDir}/${file}"
    done
}

main ${@}
