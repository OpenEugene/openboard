module Proto.User exposing (AddRoleReq, AddUserReq, FndRolesReq, FndUsersReq, OvrUserReq, RmvUserReq, RoleResp, RolesResp, UserResp, UsersResp, addRoleReqDecoder, addRoleReqEncoder, addUserReqDecoder, addUserReqEncoder, fndRolesReqDecoder, fndRolesReqEncoder, fndUsersReqDecoder, fndUsersReqEncoder, ovrUserReqDecoder, ovrUserReqEncoder, rmvUserReqDecoder, rmvUserReqEncoder, roleRespDecoder, roleRespEncoder, rolesRespDecoder, rolesRespEncoder, userRespDecoder, userRespEncoder, usersRespDecoder, usersRespEncoder)

-- DO NOT EDIT
-- AUTOGENERATED BY THE ELM PROTOCOL BUFFER COMPILER
-- https://github.com/tiziano88/elm-protobuf
-- source file: user.proto

import Json.Decode as JD
import Json.Encode as JE
import Protobuf exposing (..)


type alias RoleResp =
    { id : Int -- 1
    , name : String -- 2
    }


roleRespDecoder : JD.Decoder RoleResp
roleRespDecoder =
    JD.lazy <|
        \_ ->
            decode RoleResp
                |> required "id" intDecoder 0
                |> required "name" JD.string ""


roleRespEncoder : RoleResp -> JE.Value
roleRespEncoder v =
    JE.object <|
        List.filterMap identity <|
            [ requiredFieldEncoder "id" JE.int 0 v.id
            , requiredFieldEncoder "name" JE.string "" v.name
            ]


type alias AddRoleReq =
    { name : String -- 1
    }


addRoleReqDecoder : JD.Decoder AddRoleReq
addRoleReqDecoder =
    JD.lazy <|
        \_ ->
            decode AddRoleReq
                |> required "name" JD.string ""


addRoleReqEncoder : AddRoleReq -> JE.Value
addRoleReqEncoder v =
    JE.object <|
        List.filterMap identity <|
            [ requiredFieldEncoder "name" JE.string "" v.name
            ]


type alias RolesResp =
    { items : List RoleResp -- 1
    , total : Int -- 2
    }


rolesRespDecoder : JD.Decoder RolesResp
rolesRespDecoder =
    JD.lazy <|
        \_ ->
            decode RolesResp
                |> repeated "items" roleRespDecoder
                |> required "total" intDecoder 0


rolesRespEncoder : RolesResp -> JE.Value
rolesRespEncoder v =
    JE.object <|
        List.filterMap identity <|
            [ repeatedFieldEncoder "items" roleRespEncoder v.items
            , requiredFieldEncoder "total" JE.int 0 v.total
            ]


type alias FndRolesReq =
    { roleIds : List Int -- 1
    , roleNames : List String -- 2
    , limit : Int -- 3
    , lapse : Int -- 4
    }


fndRolesReqDecoder : JD.Decoder FndRolesReq
fndRolesReqDecoder =
    JD.lazy <|
        \_ ->
            decode FndRolesReq
                |> repeated "roleIds" intDecoder
                |> repeated "roleNames" JD.string
                |> required "limit" intDecoder 0
                |> required "lapse" intDecoder 0


fndRolesReqEncoder : FndRolesReq -> JE.Value
fndRolesReqEncoder v =
    JE.object <|
        List.filterMap identity <|
            [ repeatedFieldEncoder "roleIds" JE.int v.roleIds
            , repeatedFieldEncoder "roleNames" JE.string v.roleNames
            , requiredFieldEncoder "limit" JE.int 0 v.limit
            , requiredFieldEncoder "lapse" JE.int 0 v.lapse
            ]


type alias UserResp =
    { id : Int -- 1
    , username : String -- 2
    , email : String -- 3
    , emailHold : Bool -- 4
    , altmail : String -- 5
    , altmailHold : Bool -- 6
    , firstName : String -- 7
    , lastName : String -- 8
    , avatar : String -- 9
    , roles : List RoleResp -- 10
    , lastLogin : Maybe Timestamp -- 11
    , created : Maybe Timestamp -- 12
    , updated : Maybe Timestamp -- 13
    , deleted : Maybe Timestamp -- 14
    , blocked : Maybe Timestamp -- 15
    }


userRespDecoder : JD.Decoder UserResp
userRespDecoder =
    JD.lazy <|
        \_ ->
            decode UserResp
                |> required "id" intDecoder 0
                |> required "username" JD.string ""
                |> required "email" JD.string ""
                |> required "emailHold" JD.bool False
                |> required "altmail" JD.string ""
                |> required "altmailHold" JD.bool False
                |> required "firstName" JD.string ""
                |> required "lastName" JD.string ""
                |> required "avatar" JD.string ""
                |> repeated "roles" roleRespDecoder
                |> optional "lastLogin" timestampDecoder
                |> optional "created" timestampDecoder
                |> optional "updated" timestampDecoder
                |> optional "deleted" timestampDecoder
                |> optional "blocked" timestampDecoder


userRespEncoder : UserResp -> JE.Value
userRespEncoder v =
    JE.object <|
        List.filterMap identity <|
            [ requiredFieldEncoder "id" JE.int 0 v.id
            , requiredFieldEncoder "username" JE.string "" v.username
            , requiredFieldEncoder "email" JE.string "" v.email
            , requiredFieldEncoder "emailHold" JE.bool False v.emailHold
            , requiredFieldEncoder "altmail" JE.string "" v.altmail
            , requiredFieldEncoder "altmailHold" JE.bool False v.altmailHold
            , requiredFieldEncoder "firstName" JE.string "" v.firstName
            , requiredFieldEncoder "lastName" JE.string "" v.lastName
            , requiredFieldEncoder "avatar" JE.string "" v.avatar
            , repeatedFieldEncoder "roles" roleRespEncoder v.roles
            , optionalEncoder "lastLogin" timestampEncoder v.lastLogin
            , optionalEncoder "created" timestampEncoder v.created
            , optionalEncoder "updated" timestampEncoder v.updated
            , optionalEncoder "deleted" timestampEncoder v.deleted
            , optionalEncoder "blocked" timestampEncoder v.blocked
            ]


type alias AddUserReq =
    { username : String -- 1
    , email : String -- 2
    , emailHold : Bool -- 3
    , altmail : String -- 4
    , altmailHold : Bool -- 5
    , firstName : String -- 6
    , lastName : String -- 7
    , avatar : String -- 8
    , password : String -- 9
    , roleIds : List Int -- 10
    }


addUserReqDecoder : JD.Decoder AddUserReq
addUserReqDecoder =
    JD.lazy <|
        \_ ->
            decode AddUserReq
                |> required "username" JD.string ""
                |> required "email" JD.string ""
                |> required "emailHold" JD.bool False
                |> required "altmail" JD.string ""
                |> required "altmailHold" JD.bool False
                |> required "firstName" JD.string ""
                |> required "lastName" JD.string ""
                |> required "avatar" JD.string ""
                |> required "password" JD.string ""
                |> repeated "roleIds" intDecoder


addUserReqEncoder : AddUserReq -> JE.Value
addUserReqEncoder v =
    JE.object <|
        List.filterMap identity <|
            [ requiredFieldEncoder "username" JE.string "" v.username
            , requiredFieldEncoder "email" JE.string "" v.email
            , requiredFieldEncoder "emailHold" JE.bool False v.emailHold
            , requiredFieldEncoder "altmail" JE.string "" v.altmail
            , requiredFieldEncoder "altmailHold" JE.bool False v.altmailHold
            , requiredFieldEncoder "firstName" JE.string "" v.firstName
            , requiredFieldEncoder "lastName" JE.string "" v.lastName
            , requiredFieldEncoder "avatar" JE.string "" v.avatar
            , requiredFieldEncoder "password" JE.string "" v.password
            , repeatedFieldEncoder "roleIds" JE.int v.roleIds
            ]


type alias OvrUserReq =
    { id : Int -- 1
    , req : Maybe AddUserReq -- 2
    }


ovrUserReqDecoder : JD.Decoder OvrUserReq
ovrUserReqDecoder =
    JD.lazy <|
        \_ ->
            decode OvrUserReq
                |> required "id" intDecoder 0
                |> optional "req" addUserReqDecoder


ovrUserReqEncoder : OvrUserReq -> JE.Value
ovrUserReqEncoder v =
    JE.object <|
        List.filterMap identity <|
            [ requiredFieldEncoder "id" JE.int 0 v.id
            , optionalEncoder "req" addUserReqEncoder v.req
            ]


type alias UsersResp =
    { items : List UserResp -- 1
    , total : Int -- 2
    }


usersRespDecoder : JD.Decoder UsersResp
usersRespDecoder =
    JD.lazy <|
        \_ ->
            decode UsersResp
                |> repeated "items" userRespDecoder
                |> required "total" intDecoder 0


usersRespEncoder : UsersResp -> JE.Value
usersRespEncoder v =
    JE.object <|
        List.filterMap identity <|
            [ repeatedFieldEncoder "items" userRespEncoder v.items
            , requiredFieldEncoder "total" JE.int 0 v.total
            ]


type alias FndUsersReq =
    { roleIds : List Int -- 1
    , emails : List String -- 2
    , emailHold : Bool -- 3
    , altmails : List String -- 4
    , altmailHold : Bool -- 5
    , createdFirst : Maybe Timestamp -- 6
    , createdFinal : Maybe Timestamp -- 7
    , createdDesc : Bool -- 8
    , limit : Int -- 9
    , lapse : Int -- 10
    }


fndUsersReqDecoder : JD.Decoder FndUsersReq
fndUsersReqDecoder =
    JD.lazy <|
        \_ ->
            decode FndUsersReq
                |> repeated "roleIds" intDecoder
                |> repeated "emails" JD.string
                |> required "emailHold" JD.bool False
                |> repeated "altmails" JD.string
                |> required "altmailHold" JD.bool False
                |> optional "createdFirst" timestampDecoder
                |> optional "createdFinal" timestampDecoder
                |> required "createdDesc" JD.bool False
                |> required "limit" intDecoder 0
                |> required "lapse" intDecoder 0


fndUsersReqEncoder : FndUsersReq -> JE.Value
fndUsersReqEncoder v =
    JE.object <|
        List.filterMap identity <|
            [ repeatedFieldEncoder "roleIds" JE.int v.roleIds
            , repeatedFieldEncoder "emails" JE.string v.emails
            , requiredFieldEncoder "emailHold" JE.bool False v.emailHold
            , repeatedFieldEncoder "altmails" JE.string v.altmails
            , requiredFieldEncoder "altmailHold" JE.bool False v.altmailHold
            , optionalEncoder "createdFirst" timestampEncoder v.createdFirst
            , optionalEncoder "createdFinal" timestampEncoder v.createdFinal
            , requiredFieldEncoder "createdDesc" JE.bool False v.createdDesc
            , requiredFieldEncoder "limit" JE.int 0 v.limit
            , requiredFieldEncoder "lapse" JE.int 0 v.lapse
            ]


type alias RmvUserReq =
    { id : Int -- 1
    }


rmvUserReqDecoder : JD.Decoder RmvUserReq
rmvUserReqDecoder =
    JD.lazy <|
        \_ ->
            decode RmvUserReq
                |> required "id" intDecoder 0


rmvUserReqEncoder : RmvUserReq -> JE.Value
rmvUserReqEncoder v =
    JE.object <|
        List.filterMap identity <|
            [ requiredFieldEncoder "id" JE.int 0 v.id
            ]
