// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserSvcClient is the client API for UserSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserSvcClient interface {
	AddRole(ctx context.Context, in *AddRoleReq, opts ...grpc.CallOption) (*RoleResp, error)
	FndRoles(ctx context.Context, in *FndRolesReq, opts ...grpc.CallOption) (*RolesResp, error)
	AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*UserResp, error)
	OvrUser(ctx context.Context, in *OvrUserReq, opts ...grpc.CallOption) (*UserResp, error)
	FndUsers(ctx context.Context, in *FndUsersReq, opts ...grpc.CallOption) (*UsersResp, error)
	RmvUser(ctx context.Context, in *RmvUserReq, opts ...grpc.CallOption) (*RmvUserResp, error)
}

type userSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewUserSvcClient(cc grpc.ClientConnInterface) UserSvcClient {
	return &userSvcClient{cc}
}

func (c *userSvcClient) AddRole(ctx context.Context, in *AddRoleReq, opts ...grpc.CallOption) (*RoleResp, error) {
	out := new(RoleResp)
	err := c.cc.Invoke(ctx, "/pb.UserSvc/AddRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSvcClient) FndRoles(ctx context.Context, in *FndRolesReq, opts ...grpc.CallOption) (*RolesResp, error) {
	out := new(RolesResp)
	err := c.cc.Invoke(ctx, "/pb.UserSvc/FndRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSvcClient) AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*UserResp, error) {
	out := new(UserResp)
	err := c.cc.Invoke(ctx, "/pb.UserSvc/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSvcClient) OvrUser(ctx context.Context, in *OvrUserReq, opts ...grpc.CallOption) (*UserResp, error) {
	out := new(UserResp)
	err := c.cc.Invoke(ctx, "/pb.UserSvc/OvrUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSvcClient) FndUsers(ctx context.Context, in *FndUsersReq, opts ...grpc.CallOption) (*UsersResp, error) {
	out := new(UsersResp)
	err := c.cc.Invoke(ctx, "/pb.UserSvc/FndUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSvcClient) RmvUser(ctx context.Context, in *RmvUserReq, opts ...grpc.CallOption) (*RmvUserResp, error) {
	out := new(RmvUserResp)
	err := c.cc.Invoke(ctx, "/pb.UserSvc/RmvUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserSvcServer is the server API for UserSvc service.
// All implementations should embed UnimplementedUserSvcServer
// for forward compatibility
type UserSvcServer interface {
	AddRole(context.Context, *AddRoleReq) (*RoleResp, error)
	FndRoles(context.Context, *FndRolesReq) (*RolesResp, error)
	AddUser(context.Context, *AddUserReq) (*UserResp, error)
	OvrUser(context.Context, *OvrUserReq) (*UserResp, error)
	FndUsers(context.Context, *FndUsersReq) (*UsersResp, error)
	RmvUser(context.Context, *RmvUserReq) (*RmvUserResp, error)
}

// UnimplementedUserSvcServer should be embedded to have forward compatible implementations.
type UnimplementedUserSvcServer struct {
}

func (UnimplementedUserSvcServer) AddRole(context.Context, *AddRoleReq) (*RoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRole not implemented")
}
func (UnimplementedUserSvcServer) FndRoles(context.Context, *FndRolesReq) (*RolesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FndRoles not implemented")
}
func (UnimplementedUserSvcServer) AddUser(context.Context, *AddUserReq) (*UserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedUserSvcServer) OvrUser(context.Context, *OvrUserReq) (*UserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OvrUser not implemented")
}
func (UnimplementedUserSvcServer) FndUsers(context.Context, *FndUsersReq) (*UsersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FndUsers not implemented")
}
func (UnimplementedUserSvcServer) RmvUser(context.Context, *RmvUserReq) (*RmvUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RmvUser not implemented")
}

// UnsafeUserSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserSvcServer will
// result in compilation errors.
type UnsafeUserSvcServer interface {
	mustEmbedUnimplementedUserSvcServer()
}

func RegisterUserSvcServer(s grpc.ServiceRegistrar, srv UserSvcServer) {
	s.RegisterService(&UserSvc_ServiceDesc, srv)
}

func _UserSvc_AddRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSvcServer).AddRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserSvc/AddRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSvcServer).AddRole(ctx, req.(*AddRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSvc_FndRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FndRolesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSvcServer).FndRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserSvc/FndRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSvcServer).FndRoles(ctx, req.(*FndRolesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSvc_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSvcServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserSvc/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSvcServer).AddUser(ctx, req.(*AddUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSvc_OvrUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OvrUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSvcServer).OvrUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserSvc/OvrUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSvcServer).OvrUser(ctx, req.(*OvrUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSvc_FndUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FndUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSvcServer).FndUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserSvc/FndUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSvcServer).FndUsers(ctx, req.(*FndUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSvc_RmvUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RmvUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSvcServer).RmvUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserSvc/RmvUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSvcServer).RmvUser(ctx, req.(*RmvUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserSvc_ServiceDesc is the grpc.ServiceDesc for UserSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.UserSvc",
	HandlerType: (*UserSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRole",
			Handler:    _UserSvc_AddRole_Handler,
		},
		{
			MethodName: "FndRoles",
			Handler:    _UserSvc_FndRoles_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _UserSvc_AddUser_Handler,
		},
		{
			MethodName: "OvrUser",
			Handler:    _UserSvc_OvrUser_Handler,
		},
		{
			MethodName: "FndUsers",
			Handler:    _UserSvc_FndUsers_Handler,
		},
		{
			MethodName: "RmvUser",
			Handler:    _UserSvc_RmvUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
