// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PostClient is the client API for Post service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostClient interface {
	AddType(ctx context.Context, in *AddTypeReq, opts ...grpc.CallOption) (*TypeResp, error)
	FndTypes(ctx context.Context, in *FndTypesReq, opts ...grpc.CallOption) (*TypesResp, error)
	AddPost(ctx context.Context, in *AddPostReq, opts ...grpc.CallOption) (*PostResp, error)
	FndPosts(ctx context.Context, in *FndPostsReq, opts ...grpc.CallOption) (*PostsResp, error)
	OvrPost(ctx context.Context, in *OvrPostReq, opts ...grpc.CallOption) (*PostResp, error)
	RmvPost(ctx context.Context, in *RmvPostReq, opts ...grpc.CallOption) (*RmvPostResp, error)
}

type postClient struct {
	cc grpc.ClientConnInterface
}

func NewPostClient(cc grpc.ClientConnInterface) PostClient {
	return &postClient{cc}
}

func (c *postClient) AddType(ctx context.Context, in *AddTypeReq, opts ...grpc.CallOption) (*TypeResp, error) {
	out := new(TypeResp)
	err := c.cc.Invoke(ctx, "/pb.Post/AddType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) FndTypes(ctx context.Context, in *FndTypesReq, opts ...grpc.CallOption) (*TypesResp, error) {
	out := new(TypesResp)
	err := c.cc.Invoke(ctx, "/pb.Post/FndTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) AddPost(ctx context.Context, in *AddPostReq, opts ...grpc.CallOption) (*PostResp, error) {
	out := new(PostResp)
	err := c.cc.Invoke(ctx, "/pb.Post/AddPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) FndPosts(ctx context.Context, in *FndPostsReq, opts ...grpc.CallOption) (*PostsResp, error) {
	out := new(PostsResp)
	err := c.cc.Invoke(ctx, "/pb.Post/FndPosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) OvrPost(ctx context.Context, in *OvrPostReq, opts ...grpc.CallOption) (*PostResp, error) {
	out := new(PostResp)
	err := c.cc.Invoke(ctx, "/pb.Post/OvrPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) RmvPost(ctx context.Context, in *RmvPostReq, opts ...grpc.CallOption) (*RmvPostResp, error) {
	out := new(RmvPostResp)
	err := c.cc.Invoke(ctx, "/pb.Post/RmvPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostServer is the server API for Post service.
// All implementations should embed UnimplementedPostServer
// for forward compatibility
type PostServer interface {
	AddType(context.Context, *AddTypeReq) (*TypeResp, error)
	FndTypes(context.Context, *FndTypesReq) (*TypesResp, error)
	AddPost(context.Context, *AddPostReq) (*PostResp, error)
	FndPosts(context.Context, *FndPostsReq) (*PostsResp, error)
	OvrPost(context.Context, *OvrPostReq) (*PostResp, error)
	RmvPost(context.Context, *RmvPostReq) (*RmvPostResp, error)
}

// UnimplementedPostServer should be embedded to have forward compatible implementations.
type UnimplementedPostServer struct {
}

func (UnimplementedPostServer) AddType(context.Context, *AddTypeReq) (*TypeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddType not implemented")
}
func (UnimplementedPostServer) FndTypes(context.Context, *FndTypesReq) (*TypesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FndTypes not implemented")
}
func (UnimplementedPostServer) AddPost(context.Context, *AddPostReq) (*PostResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPost not implemented")
}
func (UnimplementedPostServer) FndPosts(context.Context, *FndPostsReq) (*PostsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FndPosts not implemented")
}
func (UnimplementedPostServer) OvrPost(context.Context, *OvrPostReq) (*PostResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OvrPost not implemented")
}
func (UnimplementedPostServer) RmvPost(context.Context, *RmvPostReq) (*RmvPostResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RmvPost not implemented")
}

// UnsafePostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostServer will
// result in compilation errors.
type UnsafePostServer interface {
	mustEmbedUnimplementedPostServer()
}

func RegisterPostServer(s grpc.ServiceRegistrar, srv PostServer) {
	s.RegisterService(&Post_ServiceDesc, srv)
}

func _Post_AddType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).AddType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Post/AddType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).AddType(ctx, req.(*AddTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_FndTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FndTypesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).FndTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Post/FndTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).FndTypes(ctx, req.(*FndTypesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_AddPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).AddPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Post/AddPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).AddPost(ctx, req.(*AddPostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_FndPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FndPostsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).FndPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Post/FndPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).FndPosts(ctx, req.(*FndPostsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_OvrPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OvrPostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).OvrPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Post/OvrPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).OvrPost(ctx, req.(*OvrPostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_RmvPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RmvPostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).RmvPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Post/RmvPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).RmvPost(ctx, req.(*RmvPostReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Post_ServiceDesc is the grpc.ServiceDesc for Post service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Post_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Post",
	HandlerType: (*PostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddType",
			Handler:    _Post_AddType_Handler,
		},
		{
			MethodName: "FndTypes",
			Handler:    _Post_FndTypes_Handler,
		},
		{
			MethodName: "AddPost",
			Handler:    _Post_AddPost_Handler,
		},
		{
			MethodName: "FndPosts",
			Handler:    _Post_FndPosts_Handler,
		},
		{
			MethodName: "OvrPost",
			Handler:    _Post_OvrPost_Handler,
		},
		{
			MethodName: "RmvPost",
			Handler:    _Post_RmvPost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "post.proto",
}
