// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	AddAuth(ctx context.Context, in *AddAuthReq, opts ...grpc.CallOption) (*AuthResp, error)
	RmvAuth(ctx context.Context, in *RmvAuthReq, opts ...grpc.CallOption) (*RmvAuthResp, error)
	AddVoucher(ctx context.Context, in *AddVoucherReq, opts ...grpc.CallOption) (*AddVoucherResp, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) AddAuth(ctx context.Context, in *AddAuthReq, opts ...grpc.CallOption) (*AuthResp, error) {
	out := new(AuthResp)
	err := c.cc.Invoke(ctx, "/pb.Auth/AddAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) RmvAuth(ctx context.Context, in *RmvAuthReq, opts ...grpc.CallOption) (*RmvAuthResp, error) {
	out := new(RmvAuthResp)
	err := c.cc.Invoke(ctx, "/pb.Auth/RmvAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) AddVoucher(ctx context.Context, in *AddVoucherReq, opts ...grpc.CallOption) (*AddVoucherResp, error) {
	out := new(AddVoucherResp)
	err := c.cc.Invoke(ctx, "/pb.Auth/AddVoucher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations should embed UnimplementedAuthServer
// for forward compatibility
type AuthServer interface {
	AddAuth(context.Context, *AddAuthReq) (*AuthResp, error)
	RmvAuth(context.Context, *RmvAuthReq) (*RmvAuthResp, error)
	AddVoucher(context.Context, *AddVoucherReq) (*AddVoucherResp, error)
}

// UnimplementedAuthServer should be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (UnimplementedAuthServer) AddAuth(context.Context, *AddAuthReq) (*AuthResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAuth not implemented")
}
func (UnimplementedAuthServer) RmvAuth(context.Context, *RmvAuthReq) (*RmvAuthResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RmvAuth not implemented")
}
func (UnimplementedAuthServer) AddVoucher(context.Context, *AddVoucherReq) (*AddVoucherResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVoucher not implemented")
}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_AddAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).AddAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Auth/AddAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).AddAuth(ctx, req.(*AddAuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_RmvAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RmvAuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).RmvAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Auth/RmvAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).RmvAuth(ctx, req.(*RmvAuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_AddVoucher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVoucherReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).AddVoucher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Auth/AddVoucher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).AddVoucher(ctx, req.(*AddVoucherReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAuth",
			Handler:    _Auth_AddAuth_Handler,
		},
		{
			MethodName: "RmvAuth",
			Handler:    _Auth_RmvAuth_Handler,
		},
		{
			MethodName: "AddVoucher",
			Handler:    _Auth_AddVoucher_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
